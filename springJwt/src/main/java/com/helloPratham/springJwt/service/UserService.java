package com.helloPratham.springJwt.service;

//import com.helloPratham.springJwt.entity.User;
//import com.helloPratham.springJwt.repository.UserRepository;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.security.crypto.password.PasswordEncoder;
//import org.springframework.stereotype.Service;
//
//import java.util.ArrayList;
//import java.util.List;
//import java.util.UUID;
//
//
//@Service
//public class UserService {
//    @Autowired
//    private UserRepository userRepository;
//
//    @Autowired
//    private PasswordEncoder passwordEncoder;
//
//    public List<User> getAllUsers(){
//        return userRepository.findAll();
//    }
//
//    public User createUser(User user){
//        user.setUserId(UUID.randomUUID().toString());
//        user.setPassword(passwordEncoder.encode(user.getPassword()));
//        return userRepository.save(user);
//    }
//}

import com.helloPratham.springJwt.entity.User;
import com.helloPratham.springJwt.repository.UserRepository;
import com.helloPratham.springJwt.security.JwtUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private JwtUtil jwtUtil;

    // Method to create a new user with encoded password and JWT generation
    public String createUser(User user) {
        // Setting ID for the user (auto-generated by database as Long)
        // If you want to assign a UUID here, you can do so, but it's not required with Long ID.

        user.setPassword(passwordEncoder.encode(user.getPassword()));  // Encode password

        User savedUser = userRepository.save(user);  // Save the user to the database
        return jwtUtil.generateToken(savedUser.getId().toString());  // Generate JWT based on ID
    }

    // Method to fetch user by their ID
    public User getUserById(Long userId) {
        return userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found with ID: " + userId));
    }



    // Fetch all users (if needed for the system)
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    public String validateUser(User user) {
        User loginUser = userRepository.findByPhoneNumber(user.getPhoneNumber())
                .orElseThrow(() -> new IllegalArgumentException("User not found"));
        //User savedUser = userRepository.save(user);  // Save the user to the database
        return jwtUtil.generateToken(loginUser.getId().toString());  // Gener
    }
}
